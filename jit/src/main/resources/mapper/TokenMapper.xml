<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.ljz.jit.mapper.TokenMapper" >
  <resultMap id="BaseResultMap" type="com.ljz.jit.pojo.Token" >
    <id column="tokenId" property="tokenid" jdbcType="INTEGER" />
    <result column="userId" property="userid" jdbcType="INTEGER" />
    <result column="userAgent" property="useragent" jdbcType="VARCHAR" />
    <result column="token" property="token" jdbcType="VARCHAR" />
    <result column="createTime" property="createtime" jdbcType="VARCHAR" />
    <result column="expireTime" property="expiretime" jdbcType="VARCHAR" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    tokenId, userId, userAgent, token, createTime, expireTime
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.ljz.jit.pojo.TokenExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from token
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from token
    where tokenId = #{tokenid,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from token
    where tokenId = #{tokenid,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.ljz.jit.pojo.TokenExample" >
    delete from token
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.ljz.jit.pojo.Token" >
    insert into token (tokenId, userId, userAgent, 
      token, createTime, expireTime
      )
    values (#{tokenid,jdbcType=INTEGER}, #{userid,jdbcType=INTEGER}, #{useragent,jdbcType=VARCHAR}, 
      #{token,jdbcType=VARCHAR}, #{createtime,jdbcType=VARCHAR}, #{expiretime,jdbcType=VARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.ljz.jit.pojo.Token" >
    insert into token
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="tokenid != null" >
        tokenId,
      </if>
      <if test="userid != null" >
        userId,
      </if>
      <if test="useragent != null" >
        userAgent,
      </if>
      <if test="token != null" >
        token,
      </if>
      <if test="createtime != null" >
        createTime,
      </if>
      <if test="expiretime != null" >
        expireTime,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="tokenid != null" >
        #{tokenid,jdbcType=INTEGER},
      </if>
      <if test="userid != null" >
        #{userid,jdbcType=INTEGER},
      </if>
      <if test="useragent != null" >
        #{useragent,jdbcType=VARCHAR},
      </if>
      <if test="token != null" >
        #{token,jdbcType=VARCHAR},
      </if>
      <if test="createtime != null" >
        #{createtime,jdbcType=VARCHAR},
      </if>
      <if test="expiretime != null" >
        #{expiretime,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.ljz.jit.pojo.TokenExample" resultType="java.lang.Integer" >
    select count(*) from token
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update token
    <set >
      <if test="record.tokenid != null" >
        tokenId = #{record.tokenid,jdbcType=INTEGER},
      </if>
      <if test="record.userid != null" >
        userId = #{record.userid,jdbcType=INTEGER},
      </if>
      <if test="record.useragent != null" >
        userAgent = #{record.useragent,jdbcType=VARCHAR},
      </if>
      <if test="record.token != null" >
        token = #{record.token,jdbcType=VARCHAR},
      </if>
      <if test="record.createtime != null" >
        createTime = #{record.createtime,jdbcType=VARCHAR},
      </if>
      <if test="record.expiretime != null" >
        expireTime = #{record.expiretime,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update token
    set tokenId = #{record.tokenid,jdbcType=INTEGER},
      userId = #{record.userid,jdbcType=INTEGER},
      userAgent = #{record.useragent,jdbcType=VARCHAR},
      token = #{record.token,jdbcType=VARCHAR},
      createTime = #{record.createtime,jdbcType=VARCHAR},
      expireTime = #{record.expiretime,jdbcType=VARCHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.ljz.jit.pojo.Token" >
    update token
    <set >
      <if test="userid != null" >
        userId = #{userid,jdbcType=INTEGER},
      </if>
      <if test="useragent != null" >
        userAgent = #{useragent,jdbcType=VARCHAR},
      </if>
      <if test="token != null" >
        token = #{token,jdbcType=VARCHAR},
      </if>
      <if test="createtime != null" >
        createTime = #{createtime,jdbcType=VARCHAR},
      </if>
      <if test="expiretime != null" >
        expireTime = #{expiretime,jdbcType=VARCHAR},
      </if>
    </set>
    where tokenId = #{tokenid,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.ljz.jit.pojo.Token" >
    update token
    set userId = #{userid,jdbcType=INTEGER},
      userAgent = #{useragent,jdbcType=VARCHAR},
      token = #{token,jdbcType=VARCHAR},
      createTime = #{createtime,jdbcType=VARCHAR},
      expireTime = #{expiretime,jdbcType=VARCHAR}
    where tokenId = #{tokenid,jdbcType=INTEGER}
  </update>
</mapper>
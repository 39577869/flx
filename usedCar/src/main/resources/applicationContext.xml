<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:p="http://www.springframework.org/schema/p"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
	http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
	http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd">

    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <property name="cacheManager" ref="cacheManager"/>
        <!-- Single realm app.  If you have multiple realms, use the 'realms' property instead. -->
        <!--<property name="sessionMode" value="native"/>-->
        <property name="realm" ref="jdbcRealm"/>
    </bean>

    <!--     Let's use some enterprise caching support for better performance.  You can replace this with any enterprise
             caching framework implementation that you like (Terracotta+Ehcache, Coherence, GigaSpaces, etc

             2.配置CacheManager -->

    <bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
        <!--         Set a net.sf.ehcache.CacheManager instance here if you already have one.  If not, a new one
                     will be creaed with a default config: -->
        <!-- <property name="cacheManager" ref="ehCacheManager"/> -->
        <!--         If you don't have a pre-built net.sf.ehcache.CacheManager instance to inject, but you want
                     a specific Ehcache configuration to be used, specify that here.  If you don't, a default
                     will be used.: -->
        <!--<property name="cacheManagerConfigFile" value="classpath:ehcache.xml"/>-->
    </bean>

    <!-- Used by the SecurityManager to access security data (users, roles, etc).
         Many other realm implementations can be used too (PropertiesRealm,
         LdapRealm, etc. -->
    <bean id="jdbcRealm" class="com.flx.realm.ShiroRealm"></bean>

    <!-- =========================================================
         Shiro Spring-specific integration
         =========================================================
    Post processor that automatically invokes init() and destroy() methods
         for Spring-configured Shiro objects so you don't have to
         1) specify an init-method and destroy-method attributes for every bean
            definition and
         2) even know which Shiro objects require these methods to be
            called. -->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>

    <!--  Enable Shiro Annotations for Spring-configured beans.  Only run after
          the lifecycleBeanProcessor has run:
          为spring配置的bean启用Shiro注释。只在lifecycleBeanProcessor运行之后运行: -->
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
          depends-on="lifecycleBeanPostProcessor"/>
    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager"/>
    </bean>

    <!--     Secure Spring remoting:  Ensure any Spring Remoting method invocations can be associated
             with a Subject for security checks. -->
    <bean id="secureRemoteInvocationExecutor" class="org.apache.shiro.spring.remoting.SecureRemoteInvocationExecutor">
        <property name="securityManager" ref="securityManager"/>
    </bean>

    <!--  Define the Shiro Filter here (as a FactoryBean) instead of directly in web.xml -
          web.xml uses the DelegatingFilterProxy to access this bean.  This allows us
          to wire things with more control as well utilize nice Spring things such as
          PropertiesPlaceholderConfigurer and abstract beans or anything else we might need: -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager"/>
        <!--<property name="loginUrl" value="/login.jsp"/>-->
        <!--<property name="successUrl" value="/NewFile.jsp"/>-->
        <!--<property name="unauthorizedUrl" value="/unauthorized.jsp"/>-->
        <!-- The 'filters' property is not necessary since any declared javax.servlet.Filter bean
             defined will be automatically acquired and available via its beanName in chain
             definitions, but you can perform overrides or parent/child consolidated configuration
             here if you like: -->
        <!-- <property name="filters">
        </property> -->
        <!-- 配置权限
            1.anon 可以被匿名访问
            2.authc 必须认证后才能访问 -->

        <property name="filterChainDefinitions">
            <value>
                /**=anon
                <!-- /** = authc -->
            </value>
        </property>
    </bean>
</beans>